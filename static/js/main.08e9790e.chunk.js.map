{"version":3,"sources":["navigation.js","components/Header/index.js","components/Header/Header.js","constants.js","containers/HomePage/HomePage.js","state/ducks/books/actions.js","state/ducks/books/actionTypes.js","containers/HomePage/index.js","containers/AddBook/AddBook.js","routes.js","containers/AddBook/index.js","containers/BookDetails/BookDetails.js","components/MainLayout/index.js","components/MainLayout/MainLayout.js","components/Main/index.js","components/Main/Main.js","components/AddBook/AddBookForm.js","components/AddBook/index.js","components/HomePage/BookStyles.js","components/HomePage/Book.js","components/HomePage/Books.js","components/HomePage/FilterSortBarStyles.js","components/HomePage/FilterSortBar.js","components/BookInfos/BookInfos.js","App.js","serviceWorker.js","state/ducks/books/reducers.js","state/ducks/books/index.js","state/store.js","index.js"],"names":["navigation","left","title","to","right","Header","useState","isOpen","setIsOpen","Navbar","color","dark","expand","NavbarBrand","tag","Link","NavbarToggler","onClick","Collapse","navbar","Nav","className","map","nav","NavItem","NavLink","NavbarText","categories","ratings","statuses","apiHost","mapDispatchToProps","getBooks","dispatch","type","axios","get","then","result","payload","data","catch","err","console","log","HomePage","connect","state","books","loading","filter","searchTerm","sortTerm","props","activePage","setActivePage","view","setView","useEffect","allBooks","filteredBooks","book","category","toLowerCase","indexOf","author","sortedBooks","sort","book1","book2","parseInt","length","items","slice","Math","ceil","PaginationArray","Array","fill","Container","ButtonGroup","Button","Pagination","aria-label","PaginationItem","disabled","PaginationLink","first","href","e","preventDefault","previous","page","index","pageNum","active","next","last","AddBook","setBook","id","routerProps","match","params","isEdit","componentProps","Row","Col","xs","routes","path","exact","component","selectedBooks","MainLayout","document","Children","children","Main","route","Comp","validationSchema","Yup","shape","required","review","min","addBook","values","history","dispacth","post","push","editBook","put","AddBookForm","withRouter","initialValues","description","rating","imageUrl","status","goodReads","onSubmit","enableReinitialize","errors","handleChange","touched","handleSubmit","handleBlur","isSubmitting","Form","FormGroup","Label","for","Input","name","placeholder","value","onChange","invalid","FormFeedback","score","StyledBook","styled","Card","Book","randomId","popoverOpen","setPopoverOpen","CardImg","top","width","src","alt","CardBody","CardText","Popover","placement","target","toggle","PopoverBody","CardLink","rel","Books","setRandomId","item","md","lg","random","StyledNavbarText","StyledInputGroup","InputGroup","changeFilter","search","activeFilter","fluid","style","padding","InputGroupAddon","addonType","InputGroupText","BookInfos","App","Boolean","window","location","hostname","initialState","reducers","action","rootReducer","combineReducers","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.08e9790e.chunk.js","sourcesContent":["const navigation = {\n    left: [\n        {\n            title: \"Home Page\",\n            to: \"/react-bootcamp-bookshelf\"\n        },\n        {\n            title: \"Read Books\",\n            to: \"/read-books\"\n        },\n    ],\n    right: [\n        {\n            title:\"+ Add Book\",\n            to:\"/add-book\"\n        }\n    ]\n}\n\n\nexport default navigation","import Header from \"./Header\"\n\nexport default Header","import React, { useState } from 'react';\nimport \"./styles\"\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    NavbarText\n} from 'reactstrap';\nimport navigation from \"../../navigation\"\nimport { Link } from \"react-router-dom\"\n\nconst Header = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div>\n            <Navbar color=\"dark\" dark expand=\"md\">\n                <NavbarBrand tag={Link} to=\"/react-bootcamp-bookshelf\">Bookshelf</NavbarBrand>\n                <NavbarToggler onClick={toggle} />\n                <Collapse isOpen={isOpen} navbar>\n                    <Nav className=\"mr-auto\" navbar>\n                        {\n                            navigation.left.map((nav) => {\n                                return <NavItem>\n                                    <NavLink tag={Link} to={nav.to}>{nav.title}</NavLink>\n                                </NavItem>\n                            }\n                            )\n                        }\n                    </Nav>\n                    {\n                        navigation.right.map((nav) => {\n                            return <NavbarText>\n                                <NavLink tag={Link} to={nav.to}>\n                                    {nav.title}\n                                </NavLink>\n                            </NavbarText>\n                        }\n                        )\n                    }\n                </Collapse>\n            </Navbar>\n        </div>\n\n    )\n}\n\nexport default Header\n","export const categories = [\n    \"JavaScript\",\n    \"HTML\",\n    \"CSS\",\n    \"Python\",\n    \"Java\"\n]\nexport const ratings = [1, 2, 3, 4, 5]\n\nexport const statuses = [\"Not Read\", \"Read\"]\n\nexport const apiHost =\"https://5ebaac0e3f97140016992b17.mockapi.io/\"\n\nexport const itemsPerPage = 4","import React, { useState,useEffect} from 'react'\nimport { connect } from \"react-redux\"\nimport { Books, FilterSortBar } from \"../../components\"\nimport { getBooks } from \"../../state/ducks/books/actions\"\nimport { Container, Pagination, PaginationItem, PaginationLink, ButtonGroup, Button } from 'reactstrap'\nimport { itemsPerPage } from \"../../constants\"\n\n\nconst HomePage = (props) => {\n\n    const [activePage, setActivePage] = useState(1)\n    const [view, setView] = useState(\"cards\")\n    useEffect(() => {\n        props.getBooks()\n    }, [])\n\n\n\n    if (props.loading) {\n        return <h1>Books are loading...</h1>\n    }\n    //console.log(\"filter\",this.props.filter)\n    const allBooks = props.books;\n    let filteredBooks = []\n    // filter for category\n    if (props.filter) {\n        filteredBooks = allBooks.filter((book) => {\n            return book.category === props.filter\n        })\n    } else {\n        filteredBooks = allBooks\n    }\n\n    //filter for searchTerm\n    if (props.searchTerm) {\n        filteredBooks = filteredBooks.filter((book) => {\n            return book.title.toLowerCase().indexOf(props.searchTerm.toLowerCase()) > -1 || book.author.toLowerCase().indexOf(props.searchTerm.toLowerCase()) > -1\n\n        })\n    }\n\n    //Sorting\n    let sortedBooks = [];\n    if (props.sortTerm) {\n        sortedBooks = [...filteredBooks].sort((book1, book2) => {\n            return parseInt(book2[props.sortTerm]) - parseInt(book1[props.sortTerm])\n        })\n    } else {\n        sortedBooks = filteredBooks\n    }\n\n\n    let books = \"\";\n    if (sortedBooks.length < 1) {\n        books = <h2>NO BOOK HERE</h2>\n    }\n    else {\n        books = <Books view={view} items={sortedBooks.slice(itemsPerPage * (activePage - 1), itemsPerPage * activePage)} />\n\n    }\n    console.log(\"pages: \", Math.ceil(sortedBooks.length / itemsPerPage))\n    const PaginationArray = new Array(Math.ceil(sortedBooks.length / itemsPerPage))\n    PaginationArray.fill(null)\n    return (\n        <div>\n            <FilterSortBar />\n            <Container>\n                <div>\n                    <ButtonGroup>\n                        <Button color=\"primary\" onClick={() => {\n                            setView(\"cards\")\n                        }} >Cards View</Button>\n                        <Button color=\"primary\" onClick={() => {\n                            setView(\"list\")\n                        }} >List View</Button>\n                    </ButtonGroup>\n                </div>\n\n                <div className=\"books-holder\">\n                    {books}\n                </div>\n\n                <Pagination aria-label=\"Page navigation example\">\n                    <PaginationItem disabled={activePage === 1}>\n                        <PaginationLink first href=\"#\" onClick={(e) => {\n                            e.preventDefault()\n                            setActivePage(1)\n                        }} />\n                    </PaginationItem>\n                    <PaginationItem disabled={activePage === 1}>\n                        <PaginationLink previous href=\"#\" onClick={(e) => {\n                            e.preventDefault()\n                            setActivePage(activePage - 1)\n                        }} />\n                    </PaginationItem>\n                    {\n                        PaginationArray.map((page, index) => {\n                            const pageNum = index + 1\n                            return <PaginationItem active={pageNum === activePage}>\n                                <PaginationLink href=\"#\" onClick={(e) => {\n                                    e.preventDefault()\n                                    setActivePage(pageNum)\n                                }} >\n                                    {pageNum}\n                                </PaginationLink>\n                            </PaginationItem>\n                        })\n                    }\n                    <PaginationItem disabled={activePage === PaginationArray.length}>\n                        <PaginationLink next href=\"#\" onClick={(e) => {\n                            e.preventDefault()\n                            setActivePage(activePage - 1)\n                        }} />\n                    </PaginationItem>\n                    <PaginationItem disabled={activePage === PaginationArray.length}>\n                        <PaginationLink last href=\"#\" onClick={() => {\n                            \n                            setActivePage(PaginationArray.length)\n                        }} />\n                    </PaginationItem>\n                </Pagination>\n            </Container>\n        </div>\n    )\n}\n\n\nconst mapStateToProps = (state) => {\n    return {\n        books: state.books.data,\n        loading: state.books.loading,\n        filter: state.books.filter,\n        searchTerm: state.books.searchTerm,\n        sortTerm: state.books.sortTerm\n\n    }\n}\nconst mapDispatchToProps = {\n    getBooks\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)\n\n\n","import * as Actions from \"./actionTypes\"\nimport axios from \"axios\"\nimport { apiHost } from \"../../../constants\"\n\nexport const addBook = (values, history) => {\n    return (dispacth) => {\n        axios.post(`${apiHost}/books`, values).then((result) => {\n            console.log(result.data)\n            dispacth({\n                type: Actions.ADD_BOOK,\n                payload: result.data\n            })\n            history.push(\"/react-bootcamp-bookshelf\")\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n}\nexport const editBook = (values, history, id) => {\n    return dispatch => {\n        axios.put(`${apiHost}/books/${id}`, values).then((result) => {\n            dispatch({ type: Actions.UPDATE_BOOKS, payload: result.data })\n            history.push(\"/react-bootcamp-bookshelf\");\n        }).catch((err) => {\n            console.log(err);\n        });\n    };\n};\n\n\n\nexport const getBooks = () => {\n    return dispatch => {\n        dispatch({\n            type: Actions.LOAD_BOOKS\n        })\n        axios.get(`${apiHost}/books`).then((result) => {\n            dispatch({\n                type: Actions.SET_BOOKS,\n                payload: result.data\n            })\n        }).catch((err) => {\n            console.log(err)\n        })\n    }\n}\n\nexport const setFilter = (filter) => {\n    return dispatch => {\n        dispatch({\n            type: Actions.SET_FILTER,\n            payload: filter\n        })\n    }\n}\n\nexport const searchBooks = (searchTerm) => {\n    return dispatch => {\n        dispatch({\n            type: Actions.SEARCH_BOOKS,\n            payload: searchTerm\n        })\n    }\n}\nexport const sortBooks = (sortTerm) => {\n    return dispatch => {\n        dispatch({\n            type: Actions.SORT_BOOKS,\n            payload: sortTerm\n        })\n    }\n}","const SET_BOOKS = \"SET_BOOKS\"\nconst GET_BOOKS = \"GET_BOOKS\"\nconst ADD_BOOK = \"ADD_BOOK\"\nconst LOAD_BOOKS = \"LOAD_BOOKS\"\nconst SET_FILTER = \"SET_FILTER\"\nconst SEARCH_BOOKS = \"SEARCH_BOOKS\"\nconst SORT_BOOKS = \"SORT_BOOKS\"\nconst UPDATE_BOOKS = \"UPDATE_BOOKS\"\n\nexport { SET_BOOKS, GET_BOOKS, ADD_BOOK, LOAD_BOOKS, SET_FILTER, SEARCH_BOOKS, SORT_BOOKS, UPDATE_BOOKS }","import HomePage from \"./HomePage\"\n\nexport default HomePage","import React,{useState,useEffect} from 'react';\nimport { AddBookForm } from \"../../components\"\nimport { Row, Col, Container } from 'reactstrap'\nimport axios from 'axios';\nimport { apiHost } from \"../../constants\"\n\n\nconst AddBook = (props) => {\n    const [book,setBook] = useState(\"\")\n    useEffect(()=>{\n        const id = props.routerProps.match.params.id\n        if (id) {\n            axios.get(`${apiHost}/books/${id}`).then((result) => {\n                console.log(\"result: \", result)\n                setBook(result.data)\n            })\n        }\n    },[])\n\n        const isEdit = props.componentProps.isEdit\n        const id = props.routerProps.match.params.id\n        console.log(id)\n        return (\n            <Container>\n                <Row>\n                    <Col xs={12}>\n                        {\n                            isEdit ? <h3>Edit Book</h3> : <h3>Add a new book</h3>\n                        }\n                    </Col>\n                    <Col>\n                        <AddBookForm isEdit={isEdit}  id={id} book={book} />\n                    </Col>\n                </Row>\n            </Container>\n        )\n}\n\nexport default AddBook\n","import { HomePage,AddBook,BookDetails } from \"./containers\"\n\nconst routes = [\n    {\n        title: \"Home Page\",\n        path: \"/react-bootcamp-bookshelf\",\n        exact: true,\n        componentProps: {\n        },\n        component: HomePage\n    },\n    {\n        title: \"Add Book\",\n        path: \"/add-book\",\n        exact: false,\n        componentProps: {\n        },\n        component: AddBook\n    }, \n    {\n        title: \"Edit Book\",\n        path: \"/edit-book/:id\",\n        exact: false,\n        componentProps: {\n            isEdit: true\n        },\n        component: AddBook\n    },\n    {\n        title: \"Book Details\",\n        path: \"/book-details/:id\",\n        exact: false,\n        componentProps: {\n        },\n        component: BookDetails\n    }, \n]\nexport default routes","import AddBook from \"./AddBook\"\n\nexport default AddBook","import React, { useState, useEffect } from 'react';\nimport { BookInfos } from \"../../components\"\nimport axios from 'axios';\nimport { apiHost } from \"../../constants\"\n\n\nconst BookDetails = (props) => {\n\n    const [book, setBook] = useState(\"\")\n\n    useEffect(() => {\n        const id = props.routerProps.match.params.id\n        if (id) {\n            axios.get(`${apiHost}/books/${id}`).then((result) => {\n                console.log(\"result: \", result)\n                setBook(result.data)\n            })\n        }\n    }, [])\n\n\n    console.log(props)\n\n    const selectedBooks = props.routerProps.match.params.id\n    console.log(\"s\", selectedBooks)\n    if (!book) {\n        return <h2>{selectedBooks} books not found!</h2>\n    }\n    return (\n        <div>\n            <BookInfos id={selectedBooks} book={book} />\n        </div>\n    );\n}\n\nexport default BookDetails\n","import MainLayout from \"./MainLayout\"\n\nexport default MainLayout","import React, {useEffect} from 'react'\n\nconst MainLayout = (props) => {\n\n    useEffect(() => {\n        const title = props.title\n        document.title = title\n    }, [])\n\n    const Children = props.children\n\n    return (\n        <div>\n            <Children routerProps={props.routerProps} componentProps={props.componentProps} />\n        </div>\n    )\n}\n\nexport default MainLayout\n\n","import Main from \"./Main\"\n\nexport default Main","import React from 'react'\nimport { Switch, Route } from \"react-router-dom\"\nimport routes from \"../../routes\"\nimport MainLayout from '../MainLayout'\n\nconst Main = () => {\n    return (\n        <div>\n            <Switch>\n                {\n                    routes.map((route) => {\n                        return <Route\n                            path={route.path}\n                            exact ={route.exact}\n                            component={(props)=>{\n                                const Comp = route.component\n                            return <MainLayout title = {route.title} routerProps={props} componentProps={route.componentProps}>{Comp}</MainLayout>\n                            }} />\n\n                    })\n                }\n            </Switch>\n        </div>\n    )\n}\n\nexport default Main\n","import React from 'react'\nimport { connect } from \"react-redux\"\nimport { Button, Form, FormGroup, Label, Input, FormFeedback } from 'reactstrap';\nimport { Formik } from \"formik\"\nimport { categories, ratings, statuses } from \"../../constants\"\nimport * as Yup from \"yup\"\nimport { addBook, editBook } from \"../../state/ducks/books/actions\"\nimport { withRouter } from 'react-router';\n\n\nconst validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Title is a required field\"),\n    author: Yup.string().required(\"Author is a required field\"),\n    review: Yup.string().min(30, \"You can't enter less than 30 characters\")\n});\n\n\n\nconst AddBookForm = (props) => {\n    console.log(props);\n    let initialValues = {\n        title: \"\",\n        author: \"\",\n        category: \"JavaScript\",\n        description: \"\",\n        rating: \"5\",\n        imageUrl: \"\",\n        status: \"Not Read\",\n        review: \"\",\n        goodReads: \"\"\n    };\n    if (props.isEdit && props.book) {\n        initialValues = { ...props.book }\n    }\n    return (\n        <div>\n            <Formik initialValues={initialValues}\n                validationSchema={validationSchema}\n                onSubmit={(values) => {\n                    props.isEdit ?\n                        props.editBook(values, props.history, props.id)\n                        : props.addBook(values, props.history)\n                }}\n                enableReinitialize={true}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                    /* and other goodies */\n                }) => (\n                        <Form onSubmit={handleSubmit}>\n                            <FormGroup>\n                                <Label for=\"title\">Title</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"title\"\n                                    id=\"title\"\n                                    placeholder=\"Name of the book\"\n                                    value={values.title}\n                                    onChange={handleChange}\n                                    invalid={errors.title}\n                                />\n                                {\n                                    errors.title && <FormFeedback>{errors.title}</FormFeedback>\n                                }\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"author\">Author</Label>\n                                <Input\n                                    type=\"text\"\n                                    name=\"author\"\n                                    id=\"author\"\n                                    placeholder=\"author of the book\"\n                                    value={values.author}\n                                    onChange={handleChange}\n                                    invalid={errors.author}\n                                />\n                                {\n                                    errors.author && <FormFeedback>{errors.author}</FormFeedback>\n                                }\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"imageUrl\">Image URL</Label>\n                                <Input\n                                    type=\"url\"\n                                    name=\"imageUrl\"\n                                    id=\"imageUrl\"\n                                    placeholder=\"Image of the book\"\n                                    value={values.imageUrl}\n                                    onChange={handleChange}\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Category</Label>\n                                <Input\n                                    type=\"select\"\n                                    name=\"category\"\n                                    id=\"category\"\n                                    value={values.category}\n                                    onChange={handleChange}\n                                >\n                                    {\n                                        categories.map((category) => {\n                                            return <option>{category}</option>\n                                        })\n                                    }\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"review\">Review</Label>\n                                <Input\n                                    type=\"textarea\"\n                                    name=\"review\"\n                                    id=\"review\"\n                                    value={values.review}\n                                    onChange={handleChange}\n                                    invalid={errors.review}\n                                />\n                                {\n                                    errors.review && <FormFeedback>{errors.review}</FormFeedback>\n                                }\n                            </FormGroup>\n\n                            <FormGroup>\n                                <Label for=\"\">Description</Label>\n                                <Input\n                                    type=\"textarea\"\n                                    name=\"description\"\n                                    id=\"description\"\n                                    value={values.description}\n                                    onChange={handleChange}\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"goodReads\">Good Reads</Label>\n                                <Input\n                                    type=\"url\"\n                                    name=\"goodReads\"\n                                    id=\"goodReads\"\n                                    placeholder=\"Url for goodReads\"\n                                    value={values.goodReads}\n                                    onChange={handleChange}\n                                />\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Rating</Label>\n                                <Input\n                                    type=\"select\"\n                                    name=\"rating\"\n                                    id=\"rating\"\n                                    value={values.rating}\n                                    onChange={handleChange}\n                                >\n                                    {\n                                        ratings.map((score) => {\n                                            return <option>{score}</option>\n                                        })\n                                    }\n                                </Input>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"exampleSelect\">Status</Label>\n                                <Input\n                                    type=\"select\"\n                                    name=\"status\"\n                                    id=\"status\"\n                                    value={values.status}\n                                    onChange={handleChange}\n                                >\n                                    {\n                                        statuses.map((status) => {\n                                            return <option>{status}</option>\n                                        })\n                                    }\n                                </Input>\n                            </FormGroup>\n                            {\n                                props.isEdit ?\n                                    <Button color=\"primary\">Edit Book</Button>\n                                    : <Button color=\"primary\">Add Book</Button>\n\n                            }\n                        </Form>\n                    )}\n            </Formik>\n        </div>\n    )\n}\nconst mapDispatchToProps = {\n    addBook,\n    editBook\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(AddBookForm))\n","import AddBookForm from \"./AddBookForm\"\n\nexport default AddBookForm","import styled from \"styled-components\";\nimport { Card } from \"reactstrap\";\n\nexport const StyledBook = styled(Card)`\n    margin-bottom:25px;\n\n    height: 500px;        \n        .card-img-top {\n                height:250px ;\n            \n    }\n`\n\n\n\n","import React, { useEffect, useState } from 'react'\nimport {\n    CardImg, CardText, CardBody, CardLink,\n    Button, Popover, PopoverHeader, PopoverBody\n} from 'reactstrap';\nimport { StyledBook } from \"./BookStyles\"\nimport { Link } from 'react-router-dom';\n\nconst Book = (props) => {\n    //console.log(props)\n    const { imageUrl, title, rating, id, review, goodReads, randomId } = props\n    useEffect(() => {\n        console.log(randomId)\n    }, [randomId])\n\n\n    useEffect(() => {\n        return () => {\n            console.log(\"Components are going\")\n        }\n    }, [])\n\n    console.log(goodReads)\n\n    const [popoverOpen, setPopoverOpen] = useState(false);\n\n    const toggle = () => setPopoverOpen(!popoverOpen);\n    return (\n        <StyledBook>\n            <CardImg top width=\"100%\" src={imageUrl} alt={title} />\n            <CardBody>\n                <CardText>\n                    <strong>{`${rating} / 5`}</strong>\n                </CardText>\n                <CardText>{title}</CardText>\n                <Button id={`popover${id}`} type=\"button\">\n                    Review\n            </Button>\n                <Popover\n                    placement=\"bottom\"\n                    isOpen={popoverOpen}\n                    target={`popover${id}`}\n                    toggle={toggle}\n                >\n                    <PopoverBody>\n                        {review ? review : \"No review for this book\"}\n                    </PopoverBody>\n                </Popover>\n                <br />\n                <CardLink>\n                    <Link to={`/book-details/${id}`}>Details</Link>\n                </CardLink>\n                <CardLink>\n                    <Link to={`/edit-book/${id}`}>Edit Book</Link>\n                </CardLink>\n                <br />\n\n                <CardLink>\n                    {\n                        goodReads && <a href={`${goodReads}`} target=\"_blank\" rel=\"noopener noreferrer\" >Good Reads</a>\n                        //<Link to={`${goodReads}`} target=\"_blank\">Good Reads</Link>\n                    }\n                </CardLink>\n            </CardBody>\n        </StyledBook>\n\n    )\n}\n\nexport default Book\n","import React, { useState } from 'react'\nimport Book from \"./Book\"\nimport { Row, Col } from 'reactstrap'\n\n\nconst Books = (props) => {\n    const [randomId, setRandomId] = useState(1)\n    return (\n        <Row>\n            {\n                props.items.map((item) => {\n                    return <Col xs={props.view === \"cards\" ? 6 : 12}\n                        md={props.view === \"cards\" ? 4 : 12}\n                        lg={props.view === \"cards\" ? 3 : 12}\n                        onClick={()=>{\n                            setRandomId(Math.random())\n                        }}\n                    >\n                        <Book id={item.id} {...item} randomId={randomId} />\n                    </Col>\n                })\n            }\n        </Row>\n\n    )\n}\n\nexport default Books\n","import styled from \"styled-components\"\nimport { NavbarText, InputGroup } from \"reactstrap\"\n\nexport const StyledNavbarText = styled(NavbarText)`\n    margin-left:15px;\n    color: ${props => props.active ? \"#FF8247\" : \"#035491\"};\n    cursor: pointer;\n`\n\nexport const StyledInputGroup =  styled(InputGroup)`\ndisplay: inline-flex;\nwidth: 50%\n`","import React from 'react'\nimport { Nav, Container, Row, Col, InputGroupAddon, InputGroupText, Input } from 'reactstrap'\nimport { connect } from \"react-redux\"\nimport { StyledNavbarText,StyledInputGroup } from \"./FilterSortBarStyles\"\nimport { categories } from '../../constants';\nimport { setFilter, searchBooks, sortBooks } from '../../state/ducks/books/actions';\n\n\nconst FilterSortBar = (props) => {\n    return (\n        <div>\n\n            <Container fluid className=\"bg-white\" style={{padding:\"15px\"}}>\n                <Row>\n                    <Col xs={6}>\n                        <Nav>\n                            <StyledNavbarText> <strong>Categories:</strong> </StyledNavbarText>\n                            <StyledNavbarText active={!props.activeFilter} onClick={() => {\n                                props.changeFilter(\"\")\n                            }}> All </StyledNavbarText>\n                            {\n                                categories.map((category) => {\n                                    return <StyledNavbarText active={props.activeFilter === category}\n                                        onClick={() => {\n                                            props.changeFilter(category)\n                                        }}\n                                    >\n                                        {category}\n                                    </StyledNavbarText>\n                                })\n                            }\n                        </Nav>\n                    </Col>\n                    <Col xs={6}>\n                        <StyledInputGroup>\n                            <InputGroupAddon addonType=\"prepend\">\n                                <InputGroupText>Search</InputGroupText>\n                            </InputGroupAddon>\n                            <Input placeholder=\"by Book or Author\" onChange={(e)=>{\n                                props.search(e.target.value)\n                            }} />\n                        </StyledInputGroup>\n                        \n                        <StyledInputGroup className=\"header-input\">\n                            <Input type=\"select\" name=\"select\" id=\"exampleSelect\" onChange={(e)=>{\n                                props.sort(e.target.value)\n                            }}>\n                                <option value=\"\">No Sort</option>\n                                {/* <option value=\"alphabetical\">Sort Alphabetical</option> */}\n                                <option value=\"rating\">Sort by Rating</option>\n                            </Input>\n                        </StyledInputGroup >\n                    </Col>\n                </Row>\n            </Container>\n\n        </div>\n\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        activeFilter: state.books.filter\n    }\n}\n\nconst mapDispatchToProps = {\n    changeFilter: setFilter,\n    search: searchBooks,\n    sort: sortBooks\n\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterSortBar)\n","import React from 'react'\n\nconst BookInfos = (props) => {\n    console.log(props)\n    const { imageUrl, title, author, description, review, rating,goodReads } = props.book\n    return (\n        <div className=\"book-photo\">\n\n            <img\n                src={imageUrl}\n                alt={title}\n                className=\"photo\"\n            />\n\n            <div>\n                <h1>{title}</h1>\n                <h3>{rating}/5</h3>\n                <p className=\"author\">{author}</p>\n                <p className=\"description\">{description}</p>\n                <p className=\"review\">{review}</p>\n\n                {  goodReads && <a href={`${goodReads}`} target=\"_blank\" rel=\"noopener noreferrer\" >Good Reads</a>}\n            </div>\n        </div>\n\n    )\n}\n\nexport default BookInfos\n","import React from 'react';\nimport { Header, Main } from \"./components\"\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as Actions from \"./actionTypes\"\n\nconst initialState = {\n    data: [],\n    loading: false,\n    filter: \"\",\n    searchTerm: \"\",\n    sortTerm: \"\"\n}\n\nconst booksReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case Actions.ADD_BOOK:\n            return {\n                ...state,\n                data: [...state.data, action.payload]\n            }\n        case Actions.SET_BOOKS:\n            return {\n                ...state,\n                data: action.payload,\n                loading: false\n            }\n        case Actions.LOAD_BOOKS:\n            return {\n                ...state,\n                loading: true\n            }\n        case Actions.SET_FILTER:\n            return {\n                ...state,\n                filter: action.payload\n            }\n        case Actions.SEARCH_BOOKS:\n            return {\n                ...state,\n                searchTerm: action.payload\n            }\n        case Actions.SORT_BOOKS:\n            return {\n                ...state,\n                sortTerm: action.payload\n            }\n            case Actions.UPDATE_BOOKS:\n                return {\n                    ...state,\n                    data: state.data.map((book) => {\n                        if(book.id=== action.payload.id){\n                            return action.payload\n                        }else{\n                            return book\n                        }\n                    })\n                }\n        default:\n            return state\n    }\n}\n\nexport default booksReducer","import reducers from \"./reducers\"\n\nexport default reducers","import * as reducers from \"./ducks\"\nimport {combineReducers, compose, createStore, applyMiddleware } from \"redux\"\nimport thunkMiddleWare from \"redux-thunk\"\n\n\nconst rootReducer = combineReducers(reducers)\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer,composeEnhancer(applyMiddleware(thunkMiddleWare)))\n\n\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { BrowserRouter } from \"react-router-dom\"\nimport { Provider } from \"react-redux\"\nimport store from './state/store';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}